#!/bin/bash

# 자동 커밋 및 푸시 스크립트
# 사용법: ./scripts/auto-commit.sh [commit-message]

set -e

# 색상 출력 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}🚀 Auto Commit & Push - Manufacturing Simulation${NC}"
echo "=================================================="

# 프로젝트 루트로 이동
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
cd "$PROJECT_ROOT"

echo -e "${CYAN}📁 Working directory: $PROJECT_ROOT${NC}"

# Git 저장소 확인
if [ ! -d ".git" ]; then
    echo -e "${RED}❌ Git 저장소가 초기화되지 않았습니다.${NC}"
    echo "다음 명령으로 Git을 설정하세요: ./scripts/setup-git.sh"
    exit 1
fi

# 변경사항 확인
echo -e "${BLUE}🔍 변경사항 확인 중...${NC}"

# 수정된 파일 목록
MODIFIED_FILES=$(git status --porcelain)

if [ -z "$MODIFIED_FILES" ]; then
    echo -e "${YELLOW}⚠️  커밋할 변경사항이 없습니다.${NC}"
    echo -e "${GREEN}✅ 저장소가 최신 상태입니다.${NC}"
    exit 0
fi

echo -e "${CYAN}📋 변경된 파일들:${NC}"
echo "$MODIFIED_FILES" | while read line; do
    status=$(echo "$line" | cut -c1-2)
    file=$(echo "$line" | cut -c4-)
    
    case "$status" in
        "M ")  echo -e "  ${YELLOW}📝 Modified:${NC} $file" ;;
        "A ")  echo -e "  ${GREEN}➕ Added:${NC} $file" ;;
        "D ")  echo -e "  ${RED}🗑️  Deleted:${NC} $file" ;;
        "??")  echo -e "  ${BLUE}❓ Untracked:${NC} $file" ;;
        *)     echo -e "  ${CYAN}📄 $status${NC} $file" ;;
    esac
done

echo ""

# 커밋 메시지 결정
if [ ! -z "$1" ]; then
    COMMIT_MESSAGE="$1"
else
    # 자동 커밋 메시지 생성
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    
    # 변경사항 분석
    ADDED_COUNT=$(echo "$MODIFIED_FILES" | grep -c "^A " || echo "0")
    MODIFIED_COUNT=$(echo "$MODIFIED_FILES" | grep -c "^M " || echo "0")
    DELETED_COUNT=$(echo "$MODIFIED_FILES" | grep -c "^D " || echo "0")
    UNTRACKED_COUNT=$(echo "$MODIFIED_FILES" | grep -c "^??" || echo "0")
    
    # 변경사항 요약
    CHANGES_SUMMARY=""
    [ "$ADDED_COUNT" -gt 0 ] && CHANGES_SUMMARY="${CHANGES_SUMMARY}+${ADDED_COUNT} "
    [ "$MODIFIED_COUNT" -gt 0 ] && CHANGES_SUMMARY="${CHANGES_SUMMARY}~${MODIFIED_COUNT} "
    [ "$DELETED_COUNT" -gt 0 ] && CHANGES_SUMMARY="${CHANGES_SUMMARY}-${DELETED_COUNT} "
    [ "$UNTRACKED_COUNT" -gt 0 ] && CHANGES_SUMMARY="${CHANGES_SUMMARY}?${UNTRACKED_COUNT} "
    
    # 주요 변경 파일 타입 감지
    FRONTEND_CHANGES=$(echo "$MODIFIED_FILES" | grep -E "(frontend/|\.vue|\.js|\.css)" | wc -l)
    BACKEND_CHANGES=$(echo "$MODIFIED_FILES" | grep -E "(backend/|\.py)" | wc -l)
    CONFIG_CHANGES=$(echo "$MODIFIED_FILES" | grep -E "(\.json|\.md|\.sh|package\.json|requirements\.txt)" | wc -l)
    
    # 커밋 타입 결정
    COMMIT_TYPE="chore"
    COMMIT_SCOPE=""
    
    if [ "$FRONTEND_CHANGES" -gt "$BACKEND_CHANGES" ] && [ "$FRONTEND_CHANGES" -gt "$CONFIG_CHANGES" ]; then
        COMMIT_TYPE="feat"
        COMMIT_SCOPE="frontend"
    elif [ "$BACKEND_CHANGES" -gt "$FRONTEND_CHANGES" ] && [ "$BACKEND_CHANGES" -gt "$CONFIG_CHANGES" ]; then
        COMMIT_TYPE="feat"
        COMMIT_SCOPE="backend"
    elif [ "$CONFIG_CHANGES" -gt 0 ]; then
        COMMIT_TYPE="config"
    fi
    
    # 스코프 추가
    if [ ! -z "$COMMIT_SCOPE" ]; then
        COMMIT_PREFIX="${COMMIT_TYPE}(${COMMIT_SCOPE})"
    else
        COMMIT_PREFIX="$COMMIT_TYPE"
    fi
    
    COMMIT_MESSAGE="${COMMIT_PREFIX}: Auto-commit changes [${CHANGES_SUMMARY}]

📊 Change Summary:
- Added: ${ADDED_COUNT} files
- Modified: ${MODIFIED_COUNT} files  
- Deleted: ${DELETED_COUNT} files
- Untracked: ${UNTRACKED_COUNT} files

🔧 Component Changes:
- Frontend: ${FRONTEND_CHANGES} files
- Backend: ${BACKEND_CHANGES} files
- Config: ${CONFIG_CHANGES} files

🤖 Generated by auto-commit script
📅 Timestamp: ${TIMESTAMP}"
fi

echo -e "${BLUE}💬 Commit Message:${NC}"
echo "----------------------------------------"
echo "$COMMIT_MESSAGE"
echo "----------------------------------------"
echo ""

# 사용자 확인 (비대화형 모드가 아닌 경우)
if [ -t 1 ] && [ -z "$AUTO_CONFIRM" ]; then
    read -p "이 변경사항을 커밋하시겠습니까? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}🚫 커밋이 취소되었습니다.${NC}"
        exit 0
    fi
fi

# 파일 추가
echo -e "${BLUE}📦 파일 추가 중...${NC}"
git add .

# 커밋 실행
echo -e "${BLUE}💾 커밋 생성 중...${NC}"
git commit -m "$COMMIT_MESSAGE"

COMMIT_HASH=$(git rev-parse --short HEAD)
echo -e "${GREEN}✅ 커밋 생성 완료: ${COMMIT_HASH}${NC}"

# 원격 저장소 확인 및 푸시
if git remote get-url origin &>/dev/null; then
    echo -e "${BLUE}⬆️  원격 저장소에 푸시 중...${NC}"
    
    # 현재 브랜치 확인
    CURRENT_BRANCH=$(git branch --show-current)
    echo -e "${CYAN}🌿 Current branch: ${CURRENT_BRANCH}${NC}"
    
    # 푸시 실행
    if git push origin "$CURRENT_BRANCH"; then
        echo -e "${GREEN}✅ 원격 저장소에 성공적으로 푸시되었습니다!${NC}"
        
        # 원격 저장소 URL 표시 (GitHub/GitLab 등)
        REMOTE_URL=$(git remote get-url origin)
        if [[ "$REMOTE_URL" =~ github\.com ]]; then
            REPO_PATH=$(echo "$REMOTE_URL" | sed -E 's/.*github\.com[:/]([^/]+\/[^/]+)(\.git)?$/\1/')
            echo -e "${BLUE}🔗 GitHub: https://github.com/${REPO_PATH}/commit/${COMMIT_HASH}${NC}"
        elif [[ "$REMOTE_URL" =~ gitlab\.com ]]; then
            REPO_PATH=$(echo "$REMOTE_URL" | sed -E 's/.*gitlab\.com[:/]([^/]+\/[^/]+)(\.git)?$/\1/')
            echo -e "${BLUE}🔗 GitLab: https://gitlab.com/${REPO_PATH}/-/commit/${COMMIT_HASH}${NC}"
        fi
    else
        echo -e "${RED}❌ 푸시에 실패했습니다.${NC}"
        echo "다음을 확인해주세요:"
        echo "1. 인터넷 연결 상태"
        echo "2. 원격 저장소 접근 권한"
        echo "3. SSH 키 또는 토큰 설정"
        exit 1
    fi
else
    echo -e "${YELLOW}⚠️  원격 저장소가 설정되지 않았습니다.${NC}"
    echo "원격 저장소를 추가하려면: git remote add origin <repository-url>"
fi

echo ""
echo -e "${GREEN}🎉 자동 커밋 및 푸시가 완료되었습니다!${NC}"
echo ""
echo "Git 상태 확인:"
echo "- git status"
echo "- git log --oneline -5"
echo "- git remote -v"