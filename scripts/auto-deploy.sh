#!/bin/bash

# ÏûêÎèô Î∞∞Ìè¨ ÏõåÏπò Ïä§ÌÅ¨Î¶ΩÌä∏
# ÌååÏùº Î≥ÄÍ≤Ω Í∞êÏßÄ Ïãú ÏûêÎèôÏúºÎ°ú Ïª§Î∞ãÌïòÍ≥† Ìë∏ÏãúÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏
# ÏÇ¨Ïö©Î≤ï: ./scripts/auto-deploy.sh [watch-interval-seconds]

# ÏÉâÏÉÅ Ï∂úÎ†• Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Í∏∞Î≥∏ ÏÑ§Ï†ï
WATCH_INTERVAL=${1:-30}  # Í∏∞Î≥∏ 30Ï¥àÎßàÎã§ ÌôïÏù∏
PROJECT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

echo -e "${MAGENTA}üîÑ Auto Deploy Watcher - Manufacturing Simulation${NC}"
echo "=================================================="
echo -e "${CYAN}üìÅ Project: $PROJECT_ROOT${NC}"
echo -e "${CYAN}‚è∞ Check interval: ${WATCH_INTERVAL} seconds${NC}"
echo -e "${CYAN}üõë Stop: Press Ctrl+C${NC}"
echo ""

cd "$PROJECT_ROOT"

# ÏõåÏπò Ï§ëÎã®ÏùÑ ÏúÑÌïú Ìä∏Îû© ÏÑ§Ï†ï
trap 'echo -e "\n${YELLOW}üõë Auto deploy watcher stopped${NC}"; exit 0' INT

# Git Ï†ÄÏû•ÏÜå ÌôïÏù∏
if [ ! -d ".git" ]; then
    echo -e "${RED}‚ùå Git Ï†ÄÏû•ÏÜåÍ∞Ä ÏóÜÏäµÎãàÎã§. setup-git.shÎ•º Î®ºÏ†Ä Ïã§ÌñâÌïòÏÑ∏Ïöî.${NC}"
    exit 1
fi

# Ïù¥Ï†Ñ Ïª§Î∞ã Ìï¥Ïãú Ï†ÄÏû•
LAST_COMMIT=$(git rev-parse HEAD 2>/dev/null)
WATCH_COUNT=0

echo -e "${GREEN}üöÄ Auto deploy watcher started...${NC}"
echo ""

while true; do
    WATCH_COUNT=$((WATCH_COUNT + 1))
    CURRENT_TIME=$(date '+%H:%M:%S')
    
    # ÏÉÅÌÉú ÌëúÏãú (Îß§ 10Î≤àÏß∏ÎßàÎã§)
    if [ $((WATCH_COUNT % 10)) -eq 0 ]; then
        echo -e "${BLUE}‚è∞ ${CURRENT_TIME} - Watching for changes... (Check #${WATCH_COUNT})${NC}"
    fi
    
    # Git ÏÉÅÌÉú ÌôïÏù∏
    if ! git diff --quiet || ! git diff --cached --quiet; then
        echo ""
        echo -e "${YELLOW}üìù ${CURRENT_TIME} - Changes detected!${NC}"
        
        # Î≥ÄÍ≤ΩÎêú ÌååÏùº Î™©Î°ù ÌëúÏãú
        echo -e "${CYAN}Changed files:${NC}"
        git status --porcelain | head -10 | while read line; do
            echo "  $line"
        done
        
        # ÏûêÎèô Ïª§Î∞ã Ïã§Ìñâ
        echo -e "${BLUE}üîÑ Running auto-commit...${NC}"
        if AUTO_CONFIRM=1 ./scripts/auto-commit.sh; then
            NEW_COMMIT=$(git rev-parse HEAD)
            if [ "$NEW_COMMIT" != "$LAST_COMMIT" ]; then
                echo -e "${GREEN}‚úÖ Auto-commit successful!${NC}"
                LAST_COMMIT="$NEW_COMMIT"
                
                # Ïª§Î∞ã Ï†ïÎ≥¥ ÌëúÏãú
                echo -e "${CYAN}üìù New commit: $(git log --oneline -1)${NC}"
            fi
        else
            echo -e "${RED}‚ùå Auto-commit failed${NC}"
        fi
        
        echo ""
    fi
    
    # ÏõêÍ≤© Ï†ÄÏû•ÏÜå Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏ (Îß§ 5Î≤àÏß∏ Ï≤¥ÌÅ¨ÎßàÎã§)
    if [ $((WATCH_COUNT % 5)) -eq 0 ] && git remote get-url origin &>/dev/null; then
        git fetch origin --quiet
        
        CURRENT_BRANCH=$(git branch --show-current)
        LOCAL_COMMIT=$(git rev-parse HEAD)
        REMOTE_COMMIT=$(git rev-parse "origin/$CURRENT_BRANCH" 2>/dev/null || echo "")
        
        if [ ! -z "$REMOTE_COMMIT" ] && [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
            echo -e "${YELLOW}üì• ${CURRENT_TIME} - Remote changes detected${NC}"
            echo -e "${BLUE}üîÑ Pulling remote changes...${NC}"
            
            if git pull origin "$CURRENT_BRANCH"; then
                echo -e "${GREEN}‚úÖ Remote changes merged successfully${NC}"
                LAST_COMMIT=$(git rev-parse HEAD)
            else
                echo -e "${RED}‚ùå Failed to merge remote changes${NC}"
                echo -e "${YELLOW}‚ö†Ô∏è  Manual intervention may be required${NC}"
            fi
        fi
    fi
    
    sleep "$WATCH_INTERVAL"
done