## 개요 ##
지금까지 여러가지 간단한 시뮬레이션은 작동이 잘 되는 것을 확인했으므로 기본 구성은 정상 동작하는 것으로 보인다.
최종적으로 실제 현장에서 진행중인 공정을 시뮬레이션 해보고 실제 공정과의 제품 생산 시간 오차가 얼마나 발생되는지 파악을 해보려함 
실제 현장에서 구동중인 공정은 아래와 같은 기능을 추가하면 모두 구현이 가능할 것으로 보임
기능에는 시뮬레이션 환경을 작성할 때의 오류를 줄이기 위한 모니터링 기능, 가시성 향상, 시뮬레이션 엔진의 기능 추가 등이 있음 

## 진행 순서 ##
업데이트 사항에 대해 깊게 생각해보고 다음과 같은 순서대로 진행
1. 아래 내가 작성한 내용에 대한 문의사항이 있다면 먼저 문의를 진행
2. 해당 내용을 종합한 검토 결과를 문서로 만들어주면 내가 추가 검토를 진행할 예정이야
 - 검토 내용에는 각 항목별 코드 작성 난이도, 업데이트 시 기존코드 훼손 위험성 포함
3. ai가 검토한 결과를 유저가 최종 검토를 할 것이고 승인 시 업데이트 진행
4. 1개의 항목이 적용 -> 테스트가 완료되면 다음 기능 업데이트 진행
 - 1개의 항목 업데이트를 진행하기 전 ai는 상세히 설명하고 유저 승인이 되면 실제 코드에 업데이트 진행

## 유의 사항 ##
한가지 유의할점은 아래 내용에 스크립트 명령 추가 항목이 있을 경우 내가 추가 방식을 따로 언급하지 않으면 기존에 정의되어 있는 명령들을 변경하지 말고 새로운 함수를 작성해서 추가하는 방식으로 진행할 것. 
또한 기능을 추가하는 부분도 현재 정상적인 코드들이 수정중에 훼손 되지 않도록 왠만하면 다른 모듈로 제작
정상 작동하고 있는 시뮬레이션 엔진이 업데이트로 인하여 버그가 생기는건 원치않음
참고로 스크립트 명령어는 프로그램 언어를 모르는 사람도 쉽게 작성할 수 있도록 직관적이어야함
위 유의점에 대한 내용은 앞으로도 지켜질 수 있도록 참조문서에 기록해줘

## 업데이트 사항 ##
1. 연결점 위치 이동이 가능하도록 기능 추가 진행
 - 연결점을 선택했을 때 설정창이 나오지 않도록 수정
 - 연결점을 클릭하고 드래그 시 위치 이동 가능
 - 위치 이동 시 소속 된 블록의 외곽에서만 이동가능하도록 제한
 - 위치 이동 시 이미 연결 된 선은 따라가야함
2. 연결점 추가 기능
 1) frontend
   - 블록 선택 시 나오는 설정창에 연결점을 추가할 수 있는 버튼 생성
   - 버튼 위치는 '+행동 추가, 연결점 추가, 스크립트 편집기'와 같은 방식으로 1행에 표현
   - 버튼 클릭 시 이름을 지정할 수 있는 창이 뜨고 이름 지적 후 적용 시 해당 블록에 연결점 추가
 2) backend
   - 추가 된 연결점의 이름을 통하여 스크립트 go to 공정1.L,3 과 같은 명령 추가 시 화면에서 선연결이 되어야함
3. 엔티티 속성 추가
 1) frontend
   - 엔티티의 색상이 속성에 따라 변경(변경할 수 있는 기본 색상외의 배경 색상은 총 5가지로 gray, blue, green, red, black, white와 같으며 배경색상이 바뀔경우 텍스트(엔티티 번호)도 같이 시인성이 좋은 색상으로 변경해줘
 2) backend
   - 현재 엔티티 상태를 추적할 수 있도록 'transit' 상태 기본으로 추가 (향후 상태 추적하여 화면 상에 엔티티 모양이나 위치에 변화가 표현되는 기능 구현 예정) 
   - go to 공정1.L,3 과 같은 스크립트 명령을 진행 중에는 엔티티가 transit 상태로 변경됨(행동 시작 시 transit 상태 돌입, 행동 종료 후 normal 상태로 변경)
   - 위 transit 상태는 아래 커스텀 속성과 같이 따로 지정을 하지 않더라도 엔티티 상태에 따라 기본적으로 부여되며 아래 명령어로 변경 및 추적할 수 있음
   - 엔티티에 custom 속성을 부여할 수 있는 스크립트 명령어 추가
   - *스크립트 명령어 예시는 내가 생각해서 만들어 봤지만 생각해보고 더 좋은 아이디어가 있거나 불합리한 부분이 있으면 알려줘!!
   - 예: product type += flip(red) // 엔티티에 'flip' 속성 부여하고 red로 색상 변경
   - 예: product type += flip,1c(red) // 엔티티에 여러개의 속성 부여 flip과 1c 속성을 부여하고 red로 색상 변경
   - 예: product type += (red) // 속성 부여를 하지않고 색상만 변경
   - 예: product type -= // 해당 명령으로 위 추가 명령과 같이 동일한 방식으로 제거되는 명령을 생성
   - 조건부 실행에서도 추적이 가능해야함 (속성만 추적할 예정, 색상은 추적할 필요 없고 화면상에서만 바뀌는 걸 보여주면 됨)
   - 예 : if product type = flip // 속성 여러개 중에 flip 속성만 체크
   - 예 : if product type = flip or 1c // 두개의 속성 중에 한개라도 만족하는지 체크
   - 예 : if product type = flip and 1c // 두개의 속성이 모두 만족하는지 체크
   - 조건부 대기에서도 추적이 가능해야함 (속성만 추적)
   - 예 : wait product type = transit // or, and 조건 포함
   - custom 속성은 처음에는 empty 즉 비어있는 상태이고 부여하였을 경우 속성이 생김
   - 엔티티가 다른블록으로 이동되어도 해당 속성이 유지되어야 함
4. if 조건부 실행 and type 추가 
 - 현재 or 타입만 있는데 and 타입도 추가
 - 기존 함수에 단일 조건부 실행과 or 조건부 실행이 같이 포함되어 있는 상태명 and 조건도 해당 함수에 포함하여 수정하는 방식으로 진행해주고 단일과 or가 따로 구성되어 있으면 and 조건도 따로 만들어야함
5. wait 명령에도 or, and 타입 추가
 - 기존 함수 수정
 - 코드 업데이트 방식은 위 4번항목과 동일하게
6. int 타입 전역 변수 추가
 - 초기 선언은 전역 신호 관리 설정창에서 할 수 있도록 해줘
 - 현재 신호명을 입력하고 생성을 하였을 때 초기값 true, false 만 선택할 수 있는 부분을 type 을 선택하고 (논리, 정수) 초기값을 선택할 수 있도록 해줘
 - 이와 관련 된 기본적인 명령어도 추가해주고 어떻게 추가할 건진 검토해서 알려줘
7. 투입 블록 전용 명령어 추가
 - 현재 엔티티가 자동 생성되는 방식
 - 투입 블록 전용 명령어를 통한 엔티티 생성
 - 해당 액션은 투입 블록에만 적용할 수 있도록함
 - 스크립트 편집기에서 편집 가능 (예 : product create)
8. 배출 블록 전용 명령어 추가
 - 현재 엔티티가 배출에 도착하면 자동으로 제거 되는 방식
 - 위 7번항목과 같이 전용 명령어를 통하여 엔티티 제거(배출 카운트 +1)
 - 7번, 8번 항목을 추가하는 이유는 엔티티 생성이나 제거를 특정 행동을 진행하고 생성, 제거할 경우도 발생될 수 있기 때문
9. 각 배출 블록의 배출 된 엔티티 수량 표시
 - 배출 블록 옆에 해당 텍스트 디스플레이
 - 현재 배출 된 제품 카운트는 전체 환경에서의 배출 된 엔티티를 카운트 진행하는 것인데 배출 블록이 여러개일 경우 각 배출블록에서 배출 처리 된 엔티티의 수량을 확인할 수 있어야함
10. 캔버스에 시뮬레이션 환경을 설명할 수 있는 정보 텍스트 표시
 - 해당 텍스트는 유저가 직접 기입하며 캔버스 안쪽에 좌상단에 위치가 되고 캔버스를 이동해도 해당 텍스트는 위치가 고정이어야함
 - 배경색은 투명으로 캔버스를 가리지 않아야 하고
 - 텍스트 입력은 정보 입력 버튼을 왼쪽 버튼 배치 창에 추가를 하고 유저가 정보를 입력하면 화면에 표시 되는 방식
 - 정보 입력 버튼을 클릭 시 상단 한줄의 제목을 입력할 수 있는 입력창이 있고 그밑에 텍스트 입력창이 있고 정보를 입력할 수 있음
 - 특정 텍스트의 크기나 굵기를 변경할 수 있도록 해줘야함
 - 시뮬레이션 환경 저장 시 JSON에 해당 정보를 포함
11. 스텝 실행 간격 조정 모드
 - 설정 버튼을 누르면 나오는 창에서 모드 변경을 할 수 있도록 함
 - 현재는 스텝 실행 간격은 엔티티가 GO TO 명령 전이나 후가 1번의 스텝으로 진행됨.
 - 이를 다음과 같은 모드를 추가하여 유저가 모드를 선택하여 진행할 수 있도록 함
 - 시간 스텝 모드 : 시간 간격을 유저가 입력하면 입력한 시간 간격대로 스텝 진행
 - 이벤트 스텝 모드 : 전역에서 delay, wait, go to 명령 발생 되기 전까지를 1스텝으로 진행 // 이벤트 발생 전 또는 후 상관없는데 각각의 코드 작성 난이도가 어떤게 더 높은지 알려줘
12. 블록 상태 속성 추가
 - 각 블록은 속성을 추가할 수 있음(string 타입)
 - 속성은 1가지만 지정가능하며 이미 지정 된 속성이 있고 그 다음 다시 속성 지정이 되면 덮어 씌어짐
 - 예: 블록이름 status = running // 블록 속성 running 추가
 - 예: 블록이름 status = idle // 블록 속성 idle로 변경
 - 해당 속성은 추후 시뮬레이션 진행 종합 결과를 볼수 있는 페이지에서 참조하여 활용할 수 있을 것으로 예상
13. 블록 정보 화면에 표시
 - 유저가 지정한 각 블록의 정보를 블록 옆에 텍스트로 표시
 - 블록 정보 표시 활성화 버튼을 블록 설정창에 추가(비활성화가 초기상태이고 활성화 후 비활성화 가능)
 - 블록 위치가 변경되면 텍스트도 같이 이동
 - 각 블록에 표시할 수 있는 정보는 다음과 같음 (예: 엔티티 처리량, 블록 상태(속성에 따라), 추가로 필요할 것 같은 블록의 정보가 있다면 추천해줘)
14. 현재 화면에 선이 가장 상위에 있어서 블록을 가리거나 커넥터를 가리는 현상이 있는데 선을 가장 하위로 내려서 커넥터 -> 블록 -> 선 순으로 레이어가 되게끔 구성해야함
15. 시뮬레이션 로그 기록 명령어 추가
 - 특정 텍스트를 스크립트에 지정하면 로깅 가능하도록 구성 (로그 확인은 웹페이지에서 가능하도록 함)
 - 로그에는 로그가 실행 된 시뮬레이션 시간과 로그 명령이 실행 된 블록이름이 표시 되어야함
 - 텍스트 안에 전역 신호, 전역 변수, 블록 정보나 속성, 엔티티 속성을 참조할 수 있어야 함
16. 디버그 진행을 위한 브레이크 포인트 설정 기능 추가
 - 스크립트 편집기의 행 앞에 버튼을 누르면 브레이크 포인트 설정 가능
 - 브레이크 포인트 설정 된 행이 실행 되기 전에 시뮬레이션이 멈춤
 - 시뮬레이션이 브레이크 되면 메인화면에 브레이크 되었는지 알 수 있는 정보 확인 텍스트와 필요함
 - 브레이크 된 이후 스텝 실행, 전체 실행 진행 시 멈춘 시점부터 다시 시뮬레이션 진행
 - 당연하지만 조건부 실행안에 브레이크가 설정되어 있고 해당 조건이 맞지 않는 상태면 해당 브레이크는 체크하지 않고 시뮬레이션이 진행되어야함








